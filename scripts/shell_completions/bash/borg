# Completions for borg
# https://www.borgbackup.org/
# Note:
# Listing archives works on password protected repositories only if $BORG_PASSPHRASE is set.
# (Note: ``--numeric-owner`` is deprecated. Use ``--numeric-id`` instead)   
# Install:
# Copy this file to /usr/share/bash-completion/completions/ or /etc/bash_completion.d/

_borg()
{
    compopt -o default
    COMPREPLY=()
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"
    local prevprev="${COMP_WORDS[COMP_CWORD-2]}"
    local common_opts="-h --help --version --critical --error --warning --info -v --verbose --debug --debug-topic -p --progress --log-json --lock-wait --show-version --show-rc --umask --remote-path --remote-ratelimit --consider-part-files --debug-profile --rsh"
    local opts="${common_opts}"

    # Commands
    if [[ ${COMP_CWORD} == 1 ]] ; then
        local borg_commands="init create extract check rename list diff delete prune compact info mount umount key serve upgrade recreate export-tar with-lock break-lock config benchmark help"
        COMPREPLY=( $(compgen -W "${borg_commands}" -- ${cur}) )
        compopt +o default
        return 0
    fi

    case "${prev}" in
        'key')
            COMPREPLY=( $(compgen -W "import export change-passphrase" -- ${cur}) )
            return 0
            ;;
        'benchmark')
            COMPREPLY=( $(compgen -W "crud" -- ${cur}) )
            return 0
            ;;
        'help')
            COMPREPLY=( $(compgen -W "patterns placeholders compression" -- ${cur}) )
            return 0
            ;;
        '--encryption' | '-e')
            local encryption_modes="none keyfile keyfile-blake2 repokey repokey-blake2 authenticated authenticated-blake2"
            COMPREPLY=( $(compgen -W "${encryption_modes}" -- ${cur}) )
            return 0
            ;;
        '--files-cache')
            local files_cache_mode="ctime,size,inode mtime,size,inode ctime,size mtime,size rechunk,ctime rechunk,mtime disabled"
            COMPREPLY=( $(compgen -W "${files_cache_mode}" -- ${cur}) )
            return 0
            ;;
        '--compression' | '-C')
            local compression_methods="none auto lz4 zstd,1 zstd,2 zstd,3 zstd,4 zstd,5 zstd,6 zstd,7 zstd,8 zstd,9 zstd,10 zstd,11 zstd,12 zstd,13 zstd,14 zstd,15 zstd,16 zstd,17 zstd,18 zstd,19 zstd,20 zstd,21 zstd,22 zlib,1 zlib,2 zlib,3 zlib,4 zlib,5 zlib,6 zlib,7 zlib,8 zlib,9 lzma,0 lzma,1 lzma,2 lzma,3 lzma,4 lzma,5 lzma,6 lzma,7 lzma,8 lzma,9"
            COMPREPLY=( $(compgen -W "${compression_methods}" -- ${cur}) )
            return 0
            ;;
        '--sort-by')
            local sort_keys="timestamp name id"
            COMPREPLY=( $(compgen -W "${sort_keys}" -- ${cur}) )
            return 0
            ;;
        '-o')
            # FIXME This list is probably not full, but I tried to pick only those that are relevant to borg mount -o:
            local fuse_options="ac_attr_timeout= allow_damaged_files allow_other allow_root attr_timeout= auto auto_cache auto_unmount default_permissions entry_timeout= gid= group_id= kernel_cache max_read= negative_timeout= noauto noforget remember= remount rootmode= uid= umask= user user_id= versions"
            COMPREPLY=( $(compgen -W "${fuse_options}" -- ${cur}) )
            return 0
            ;;
        '--recompress')
            local recompress_when="if-different always never"
            COMPREPLY=( $(compgen -W "${recompress_when}" -- ${cur}) )
            return 0
            ;;
    esac

    if [[ ${cur} == -* ]] ; then
        case "${COMP_LINE}" in
            *' init '*)
                local opts="-e --encryption --append-only --storage-quota --make-parent-dirs ${common_opts}"
                ;;
            *' create '*)
                local opts="-n --dry-run -s --stats --list --filter --json --no-cache-sync --stdin-name --content-from-command -e --exclude --exclude-from --pattern --patterns-from --exclude-caches --exclude-if-present --keep-exclude-tags --exclude-nodump -x --one-file-system --numeric-owner --noatime --noctime --nobirthtime --nobsdflags --noflags --files-cache --read-special --comment --timestamp -c --checkpoint-interval --chunker-params -C --compression ${common_opts}"
                ;;
            *' extract '*)
                local opts="--list -n --dry-run --numeric-owner --nobsdflags --noflags --stdout --sparse -e --exclude --exclude-from --pattern --patterns-from --strip-components ${common_opts}"
                ;;
            *' check '*)
                local opts="--repository-only --archives-only --verify-data --repair --save-space --max-duration -P --prefix -a --glob-archives --sort-by --first --last ${common_opts}"
                ;;
            # rename
            #   no specific options
            *" list "*)
                local opts="--short --format --json --json-lines -P --prefix -a --glob-archives --sort-by --first --last -e --exclude --exclude-from --pattern --patterns-from ${common_opts}"
                ;;
            *' diff '*)
                local opts="--numeric-owner --same-chunker-params --sort -e --exclude --exclude-from --pattern --patterns-from ${common_opts}"
                ;;
            *' delete '*)
                local opts="-n --dry-run -s --stats --cache-only --force --save-space -P --prefix -a --glob-archives --sort-by --first --last ${common_opts}"
                ;;
            *' prune '*)
                local opts="-n --dry-run --force -s --stats --list --keep-within --keep-last --keep-secondly --keep-minutely -H --keep-hourly -d --keep-daily -w --keep-weekly -m --keep-monthly -y --keep-yearly --save-space -P --prefix -a --glob-archives ${common_opts}"
                ;;
            *' compact '*)
                local opts="--cleanup-commits ${common_opts}"
                ;;
            *' info '*)
                local opts="--json -P --prefix -a --glob-archives --sort-by --first --last ${common_opts}"
                ;;
            *' mount '*)
                local opts="-f --foreground -o -P --prefix -a --glob-archives --sort-by --first --last -e --exclude --exclude-from --pattern --patterns-from --strip-components ${common_opts}"
                ;;
            # umount
            #   no specific options
            # key change-passphrase
            #   no specific options
            *' export '*)
                local opts="--paper --qr-html ${common_opts}"
                ;;
            *' import '*)
                local opts="--paper ${common_opts}"
                ;;
            *' upgrade '*)
                local opts="-n --dry-run --inplace --force --tam --disable-tam ${common_opts}"
                ;;
            *' recreate '*)
                local opts="--list --filter -n dry-run -s stats -e exclude --exclude-from --pattern --patterns-from --exclude-caches --exclude-if-present --keep-exclude-tags --target -c checkpoint-interval --comment --timestamp --timestamp -C compression --recompress --chunker-params ${common_opts}"
                ;;
            *' export-tar '*)
                local opts="--tar-filter --list -e exclude --exclude-from --pattern --patterns-from --strip-components ${common_opts}"
                ;;
            *' serve '*)
                local opts="--restrict-to-path --restrict-to-repository --append-only --storage-quota ${common_opts}"
                ;;
            *' config '*)
                local opts="-c --cache -d --delete --list ${common_opts}"
                ;;
            # with-lock
            #   no specific options
            # break-lock
            #   no specific options
            # benchmark crud
            #   no specific options
        esac

        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    # Get the repository name if available
    # If there is a space before the "::" it means that no repository name was typed,
    # so probably $BORG_REPO was set and we can still list the archives.
    local repository_name="${COMP_LINE%%::*}"
    repository_name=${repository_name##* }

    # Listing archives.
    # Since "::" is treated as separate word in Bash,
    #   it is $cur when the cursor is right behind it
    #   and $prev if the user has started to type an archive name.
    local typed_word=${cur}
    local -i list_archives=0
    if [[ ${cur} == "::" ]] ; then
        list_archives=1
        typed_word=""
    fi
    if [[ ${prev} == "::" ]] ; then
        list_archives=1
    fi
    # Second archive listing for borg diff
    if [[ ${COMP_LINE} =~ ^.*\ diff\ .*::[^\ ]+\ ${cur}$ ]] ; then
        list_archives=1
    fi
    # Additional archive listing for borg delete
    if [[ ${COMP_LINE} =~ ^.*\ delete\ .*::[^\ ]+.*${cur}$ ]] ; then
        list_archives=1
    fi
    if (( $list_archives )) ; then
        local archives=$(borg list --short "${repository_name}" 2>/dev/null)
        COMPREPLY=( $(compgen -W "${archives}" -- "${typed_word}" ) )
        return 0
    fi

    return 0
}

complete -F _borg borg
